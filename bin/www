#!/usr/bin/env node
//var debug = require('debug')('PokerRoom');
var config = require('config');
var app = require('../app');
var log = require('libs/log')(module);
var sockjs = require('sockjs');
var Table = require('Table');


//app.set('port', process.env.PORT || 3000);

var server = app.listen(config.get('port'), function() {

  log.debug('Express server listening on port ' + config.get('port'));
});
var users = [];
var table;
function sendStates(states, showDown){
//  getUser('1').conn.write(states[0]);
//var answer = null;
  for(var i=0; i<states.length; i++){
    var state = states[i];
    if(state.real){
      sendMessage(showDown ? 'SHOWDOWN' : 'STATE', state, state.id);
      //getUser(state.id).conn.write(JSON.stringify(state));
    }
    // else {
    //   var result = table.handleState(state);
    //   if(result != null) answer = result;
    // }
  }
  //return answer;

}
function sendMessage(type, data, userId){
  var message = {
    type: type,
    data: data
  };
  var strMessage = JSON.stringify(message);
  if(userId != undefined){
    var user = getUser(userId);
    if(user) {
      user.conn.write(strMessage);
    }
  } else {
    users.forEach(function(item){
      item.conn.write(strMessage);
    });
  }
}

function getUser(id){
  for(var i=0;  i<users.length; i++){
    if(users[i].id == id) return users[i];
  }
}

function moveToNextUser(table, newRound){
  var states = table.getStates(newRound);
  log.debug("---Real--------");
  log.debug(JSON.stringify(states,null,'\t'));
  sendStates(states);
  var state = getChoicer(states);
  var tradeRound = true;
  while(!state.real && tradeRound){
    tradeRound = table.handleState(state);
    states = table.getStates(true);
    log.debug("---UnReal--------");
    log.debug(JSON.stringify(states,null,'\t'));
    sendStates(states);
    if(!tradeRound){
      var stage = table.nextStage();
      states = table.getStates();
      log.debug("---UnReal--------");
      log.debug(JSON.stringify(states,null,'\t'));
      //sendStates(states);
      if(!stage){
        log.debug("---UnReal--------");
        log.debug(JSON.stringify(states,null,'\t'));
        sendStates(states, true);
        //sendMessage('SERVICE', 'END_HAND');
      } else {
        log.debug("=========================="+stage+"=============================");
        sendStates(states);
        sendMessage('STAGE', stage);
        tradeRound = true;
      }
    }
    state = getChoicer(states);
  }
}

function getChoicer(states){
  for(var i=0, l=states.length; i<l; i++){
    if(states[i].choice) return states[i];
  }
}

var sockServe = sockjs.createServer();
sockServe.on('connection', function(conn) {
  log.debug('starting game...');
  users.push({'id': '1', 'conn': conn});
  table = new Table(3, users, [10, 20], 1000);
  conn.on('data', function(message) {
      message = JSON.parse(message);
      switch(message.type){
        case 'SERVICE':
          switch(message.data){
            case 'START_HAND':
              table.startHand();
              var stage = table.nextStage();
              if(stage){
                sendMessage('STAGE', stage);
                moveToNextUser(table, true);
              }else{
                sendStates(table.getStates(), true);
                //sendMessage('SERVICE', 'END_HAND');
              }
              break;
            default:
              break;
          }
          break;
        case 'DECISION':
          var tradeRound = table.handleDecision(message.data);
          if(!tradeRound){
            sendStates(table.getStates(true));
            var stage = table.nextStage();
            if(!stage){
              sendStates(table.getStates(), true);
              //sendMessage('SERVICE', 'END_HAND');
              break;
            }
            sendMessage('STAGE', stage);
          }

          moveToNextUser(table, tradeRound);
          break;
        default:
          sendMessage('SERVICE', 'END_HAND');
          break;
      }
  });
  sockServe.on('close', function() {});
  });
sockServe.installHandlers(server, {prefix:'/gameproc'});
