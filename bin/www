#!/usr/bin/env node
//var debug = require('debug')('PokerRoom');
var config = require('config');
var app = require('../app');
var log = require('libs/log')(module);
var sockjs = require('sockjs');
var Table = require('Table');


//app.set('port', process.env.PORT || 3000);

var server = app.listen(config.get('port'), function() {

  log.debug('Express server listening on port ' + config.get('port'));
});
var users = [];
var table;
function sendStates(table, states){
//  getUser('1').conn.write(states[0]);
var answer = null;
  for(var i=0; i<states.length; i++){
    var state = states[i];
    if(state.real){
      sendMessage('STATE', state, state.id);
      //getUser(state.id).conn.write(JSON.stringify(state));
    } else {
      var result = table.handleState(state);
      if(result != null) answer = result;
    }
  }
  return answer;

}
function sendMessage(type, data, userId){
  var message = {
    type: type,
    data: data
  };
  var strMessage = JSON.stringify(message);
  if(userId != undefined){
    var user = getUser(userId);
    if(user) {
      user.conn.write(strMessage);
    }
  } else {
    users.forEach(function(item){
      item.conn.write(strMessage);
    });
  }
}

function getUser(id){
  for(var i=0;  i<users.length; i++){
    if(users[i].id == id) return users[i];
  }
}
var sockServe = sockjs.createServer();
sockServe.on('connection', function(conn) {
  log.debug('starting game...');
  users.push({'id': '1', 'conn': conn});
  table = new Table(2, users, [10, 20], 1000);
  conn.on('data', function(message) {
      message = JSON.parse(message);
      switch(message.type){
        case 'SERVICE':
          switch(message.data){
            case 'START_HAND':
              table.startHand();
              var stage = table.nextStage();
              if(stage){
                //sendMessage('STAGE', stage);
                var states = table.getStates();
                log.debug(states);
                var answer = sendStates(table, states);
                while(answer != null) {//it means it was order for unreal player, let's handle all unreals
                  states = table.getStates();
                  log.debug(states);
                  answer = sendStates(table, states);
                }
              }else{
                sendMessage('SERVICE', 'END_HAND');
              }
              break;
            default:
              break;
          }
          break;
        case 'DECISION':
          var tradeRound = table.handleDecision(message.data);
          if(!tradeRound){
            var stage = table.nextStage();
            if(!stage){
              sendMessage('SERVICE', 'END_HAND');
              break;
            }
            //sendMessage('STAGE', stage);
          }

          states = table.getStates();
          log.debug(states);
          var answer = sendStates(table, states);
          while(answer != null) {//it means it was order for unreal player, let's handle all unreals
            states = table.getStates();
            log.debug(states);
            answer = sendStates(table, states);
          }
          break;
        default:
          sendMessage('SERVICE', 'END_HAND');
          break;
      }
  });
  sockServe.on('close', function() {});
  });
sockServe.installHandlers(server, {prefix:'/gameproc'});
